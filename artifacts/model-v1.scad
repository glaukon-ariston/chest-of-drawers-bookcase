
// Generated by Gemini
// Chest of Drawers with Integrated Bookcase

// --- DEBUGGING FLAGS ---
show_corpus = true;
show_drawers = true;
show_slides = true;
show_joinery = true;

// --- MAIN DIMENSIONS ---
// Corpus
H = 2300; // 230 cm
W = 800;  // 80 cm
D = 230;  // 23 cm

// Material Thickness
T1 = 19;
T2 = 12;

// Slides
Sw = 200;
Sh = 45;
Sd = 13;

// Drawers
Dh = 200; // 20 cm
Doffset = 10; // 1 cm
Doffset2 = 10; // 1 cm

// Drawer Fronts
Gap = 3;
Overhang = 3;

// Joinery
confirmat_diam = 5;
dowel_diam = 6;
dowel_len = 30;
dowel_front_depth = 10;

// --- DERIVED DIMENSIONS ---
// Corpus & Shelves
Pw = W - 2 * T1;
Ph = D;

// Drawers
DBh = Dh - T2;      // Drawer back plate height
Dd = D - 5;         // Drawer side plate depth (D - 0.5cm)
Dw = Pw - 2 * Sd;   // Drawer body width
DBw = Dw - 2 * T2;  // Drawer bottom/back inner width

// Drawer Fronts
Fw = W;
Fh0 = Dh + Doffset2 - Gap;
F1h = T1 + Fh0;
Fh = Overhang + Fh0;
F6h = Fh + Overhang;

// --- CALCULATED POSITIONS ---
// Y-position of the bottom of each drawer body
drawer_y_pos = [ for (i = [0:5]) T1 + Doffset + i * (Dh + Doffset2) ];

// Y-position of the middle plate (shelf above drawers)
middle_plate_y = drawer_y_pos[5] + Dh + Doffset2;

// Bookcase dimensions
bookcase_start_y = middle_plate_y + T1;
bookcase_end_y = H - T1;
bookcase_h = bookcase_end_y - bookcase_start_y;
bookcase_shelf_gap = (bookcase_h - 2 * T1) / 3;

// Y-positions of the two bookcase shelves
bookcase_shelf1_y = bookcase_start_y + bookcase_shelf_gap;
bookcase_shelf2_y = bookcase_start_y + 2 * bookcase_shelf_gap + T1;

// --- HELPER MODULES ---
module confirmat_hole(l, d=confirmat_diam) {
    cylinder(h=l, d=d, center=true);
}

module dowel_hole(l, d=dowel_diam) {
    cylinder(h=l, d=d, center=true);
}

// --- COMPONENT MODULES ---

// Slide representation
module slide() {
    color("darkgrey")
    cube([Sd, Sw, Sh]);
}

// Drawer Box (sides, back, bottom)
module drawer_box() {
    difference() {
        union() {
            // Left Side Plate
            translate([0, 0, 0])
            cube([T2, Dd, Dh]);
            
            // Right Side Plate
            translate([Dw - T2, 0, 0])
            cube([T2, Dd, Dh]);
            
            // Bottom Plate (between sides)
            translate([T2, 0, 0])
            cube([DBw, Dd, T2]);
            
            // Back Plate (between sides, on top of bottom)
            translate([T2, Dd - T2, T2])
            cube([DBw, T2, DBh]);
        }
        if (show_joinery) {
            // Holes for Confirmat Screws
            // Side-to-Bottom joinery (4 screws)
            for (x_pos = [T2/2, Dw - T2/2]) {
                for (y_pos = [Dd/4, Dd*3/4]) {
                    translate([x_pos, y_pos, T2/2]) rotate([90,0,0]) confirmat_hole(T2);
                }
            }
            // Side-to-Back joinery (4 screws)
            for (x_pos = [T2/2, Dw - T2/2]) {
                for (z_pos = [T2 + DBh/4, T2 + DBh*3/4]) {
                    translate([x_pos, Dd - T2/2, z_pos]) rotate([0,90,0]) confirmat_hole(T2);
                }
            }
            // Dowel holes from front
            dowel_box_depth = dowel_len - dowel_front_depth;
            // Dowels into side panels (4)
            for (x_pos = [T2/2, Dw-T2/2]) {
                 for (z_pos = [Dh/4, Dh*3/4]) {
                    translate([x_pos, -dowel_box_depth/2, z_pos]) rotate([0,90,0]) dowel_hole(dowel_box_depth);
                 }
            }
            // Dowels into bottom panel (2)
            for (x_pos = [Dw/3, Dw*2/3]) {
                translate([x_pos, -dowel_box_depth/2, T2/2]) rotate([0,90,0]) dowel_hole(dowel_box_depth);
            }
        }
    }
}

// Drawer Front
module drawer_front(f_h) {
    difference() {
        cube([Fw, T1, f_h]);
        if (show_joinery) {
            // Dowel holes
            // Dowels into side panels (4)
            for (x_pos = [T1 + Sd + T2/2, W - T1 - Sd - T2/2]) {
                 for (z_pos = [f_h/4, f_h*3/4]) {
                    translate([x_pos, T1-dowel_front_depth/2, z_pos]) rotate([0,90,0]) dowel_hole(dowel_front_depth);
                 }
            }
            // Dowels into bottom panel (2)
            for (x_pos = [W/3, W*2/3]) {
                translate([x_pos, T1-dowel_front_depth/2, (f_h - Dh)/2 + T2/2]) rotate([0,90,0]) dowel_hole(dowel_front_depth);
            }
        }
    }
}

// --- MAIN ASSEMBLY ---

// 1. Corpus
if (show_corpus) {
    color("SaddleBrown")
    difference() {
        union() {
            // Left Side
            translate([0, 0, 0]) cube([T1, D, H]);
            // Right Side
            translate([W - T1, 0, 0]) cube([T1, D, H]);
            // Bottom
            translate([T1, 0, 0]) cube([Pw, Ph, T1]);
            // Top
            translate([T1, 0, H - T1]) cube([Pw, Ph, T1]);
            // Middle Plate
            translate([T1, 0, middle_plate_y]) cube([Pw, Ph, T1]);
            // Bookcase Shelf 1
            translate([T1, 0, bookcase_shelf1_y]) cube([Pw, Ph, T1]);
            // Bookcase Shelf 2
            translate([T1, 0, bookcase_shelf2_y]) cube([Pw, Ph, T1]);
        }
        if (show_joinery) {
            // Corpus Confirmat Holes
            shelf_ys = [T1, middle_plate_y, bookcase_shelf1_y, bookcase_shelf2_y, H-T1];
            for (y_pos = shelf_ys) {
                for (x_pos = [T1/2, W-T1/2]) {
                    for (z_pos = [D/4, D*3/4]) {
                        translate([x_pos, z_pos, y_pos]) rotate([90,0,0]) confirmat_hole(T1);
                    }
                }
            }
        }
    }
}

// 2. Drawers and Slides
if (show_drawers) {
    for (i = [0:5]) {
        // Determine front height
        front_h = (i == 0) ? F1h : (i == 5) ? F6h : Fh;
        
        // Determine front y-position
        front_y = (i == 0) ? T1 : drawer_y_pos[i] - Overhang;

        // Assemble full drawer
        // Drawer Box
        translate([T1 + Sd, 0, drawer_y_pos[i]])
        color("SandyBrown")
        drawer_box();

        // Drawer Front
        translate([0, D - T1, front_y])
        color("LightGray")
        drawer_front(front_h);

        // Slides
        if (show_slides) {
            slide_y_pos = drawer_y_pos[i] + (Dh - Sh) / 2;
            // Left Slide
            translate([T1, (D - Sw) / 2, slide_y_pos])
            slide();
            // Right Slide
            translate([W - T1 - Sd, (D - Sw) / 2, slide_y_pos])
            slide();
        }
    }
}
